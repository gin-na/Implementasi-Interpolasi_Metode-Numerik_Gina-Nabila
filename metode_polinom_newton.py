# -*- coding: utf-8 -*-
"""Metode_Polinom_Newton.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w7Rb-ZxQDMn-tOL-30yf3DNjPIST6mtP

**Gina Nabila (21120122130055)**

Metode Numerik - Kelas D

Interpolasi Newton
"""

import numpy as np
import matplotlib.pyplot as plt

# Fungsi untuk menghitung konstanta a pada interpolasi Newton
def calculate_constants(x_points, y_points):
    n = len(x_points)
    constants = np.copy(y_points)

    for j in range(1, n):
        for i in range(n-1, j-1, -1):
            constants[i] = (constants[i] - constants[i-1]) / (x_points[i] - x_points[i-j])

    return constants

# Fungsi untuk menghitung nilai interpolasi Newton pada titik x
def newton_interpolation(x_points, constants, x):
    n = len(x_points)
    result = constants[-1]

    for i in range(n-2, -1, -1):
        result = result * (x - x_points[i]) + constants[i]

    return result

# Fungsi untuk memasukkan jumlah titik dan nilai
def get_user_input():
    n = int(input("Masukkan jumlah titik data: "))
    x_points = []
    y_points = []
    for i in range(n):
        x = float(input(f"Masukkan nilai x({i}): "))
        y = float(input(f"Masukkan nilai y({i}): "))
        x_points.append(x)
        y_points.append(y)
    return x_points, y_points

# Fungsi utama
def main():
    # Mendapatkan nilai yang dimasukkan
    x_points, y_points = get_user_input()

    # Menghitung koefisien interpolasi Newton
    constants = calculate_constants(x_points, y_points)

    # Menampilkan titik data yang dimasukkan
    print("Titik data yang dimasukkan:")
    for x, y in zip(x_points, y_points):
        print(f"({x}, {y})")

    # Menghitung nilai interpolasi pada titik tertentu
    x_interpolate = float(input("Masukkan nilai x yang ingin diinterpolasi: "))
    y_interpolate = newton_interpolation(x_points, constants, x_interpolate)
    print(f"Nilai interpolasi pada x = {x_interpolate} adalah y = {y_interpolate}")

    # Membuat grafik interpolasi
    x_plot = np.linspace(min(x_points) - 1, max(x_points) + 1, 1000)
    y_plot = [newton_interpolation(x_points, constants, x) for x in x_plot]

    plt.plot(x_plot, y_plot, color='hotpink', label='Interpolasi Newton')
    plt.scatter(x_points, y_points, color='orange', label='Titik Data')
    plt.scatter([x_interpolate], [y_interpolate], color='blueviolet', zorder=5, label=f'Interpolasi (x={x_interpolate})')
    plt.xlabel('x (kg/mm^2)')
    plt.ylabel('y (jam)')
    plt.title('Interpolasi Newton')
    plt.legend()
    plt.grid(True)
    plt.show()

# Menjalankan program utama
if __name__ == "__main__":
    main()